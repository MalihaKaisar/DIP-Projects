# -*- coding: utf-8 -*-
"""Image_Processing_lab_task-1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10BMDz2Y5f9MK0vKrcmR8OPSSGyJIuRQr
"""

! pip install kaggle

from google.colab import drive
drive.mount('/content/drive')

! mkdir ~/.kaggle

! cp kaggle.json ~/.kaggle/

!cp '/content/drive/MyDrive/Colab Notebooks/kaggle_credentials/kaggle.json' ~/.kaggle/

! chmod 600 ~/.kaggle/kaggle.json

! mkdir /content/kaggle_data

# Commented out IPython magic to ensure Python compatibility.
# %%shell
# ls /
# if [ ! -d "/root/.kaggle/kaggle.json" ]; then
#   echo "$DIRECTORY does not exist."
# fi

! kaggle datasets download -p /content/kaggle_data tenxengineers/denoising-dataset-multiple-iso-levels

! unzip /content/kaggle_data/denoising-dataset-multiple-iso-levels.zip -d /content/kaggle_data/denoising-dataset-multiple-iso-levels/

from skimage import io

image_1 = io.imread("/content/kaggle_data/denoising-dataset-multiple-iso-levels/AlphaISP - Denoising Dataset/AlphaISP - Denoising Dataset/PNG Data/2DNR Denoising/Noised/AlphaISP_2592x1536_8bits_Scene33.png")

image_1

import os

from matplotlib import pyplot as plt
import numpy as np

txt_files = []
for root, dirs, files in os.walk("/content/kaggle_data/denoising-dataset-multiple-iso-levels/AlphaISP - Denoising Dataset/AlphaISP - Denoising Dataset"):
    for file in files:
        if file.endswith("AlphaISP_2592x1536_8bits_Scene33.png"):
            txt_files.append(os.path.join(root, file))

txt_files = []
for root, dirs, files in os.walk("/content/kaggle_data/denoising-dataset-multiple-iso-levels/AlphaISP - Denoising Dataset/AlphaISP - Denoising Dataset"):
    for file in files:
        if file.endswith("AlphaISP_2592x1536_8bits_Scene33.png"):
            txt_files.append(os.path.join(root, file))

for noisy_image in txt_files:
  print(noisy_image)
  image = io.imread(noisy_image)
  plt.figure()
  plt.imshow(image)

plt.show()

im1 = io.imread(txt_files[0])
im2= io.imread(txt_files[1])
im3= io.imread(txt_files[2])
im4= io.imread(txt_files[3])

imsum = im1+im2+im3+im4
imsum = np.uint8(np.clip(imsum, 0, 255))
plt.figure()
plt.imshow(imsum)
plt.show()

averim = np.mean(np.array([im1, im2, im3, im4]), axis=0)
averim = np.uint8(np.clip(averim, 0, 255))
plt.figure()
plt.imshow(averim)
plt.show()

imsub = im3 - im1
plt.figure()
plt.imshow(imsub)
plt.show()

neim = np.zeros_like(im1)

neim[100:700, 1000:2000] = 255
# Display the new image
plt.figure()
plt.imshow(neim)
plt.show()
#set pixel to 1
neim[neim == 255] =1

tryim = im1*neim
plt.figure()
plt.imshow(tryim)
plt.show()
